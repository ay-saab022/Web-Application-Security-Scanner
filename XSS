import requests
from bs4 import BeautifulSoup
import sqlite3
from reportlab.pdfgen import canvas


xss_payloads = [
    "<script>alert('XSS')</script>",
    "'><script>alert('XSS')</script>",
    "\" onmouseover=\"alert('XSS')",
    "<img src=x onerror=alert('XSS')>",
    "<svg onload=alert('XSS')>",
    "javascript:alert('XSS')"
]


def test_xss_url(url):
    print(f"üîç Testing {url} for XSS vulnerabilities...")

    for payload in xss_payloads:
        test_url = f"{url}{payload}" 

        try:
            response = requests.get(test_url, timeout=5)  # Send request

            if payload in response_text:
                print(f"‚ö†Ô∏è XSS vulnerability found at {test_url}")
                return True 
        except requests.exceptions.RequestException:
            print(f"‚ùå Error testing {test_url}")
            continue  # Skip to the next payload

    print("‚úÖ No XSS vulnerability found.")
    return False



def extract_forms(url):
    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')
        return soup.find_all("form")
    except requests.exceptions.RequestException:
        return []
    

def test_xss_forms(url):
    forms = extract_forms(url)
    if not forms:
        print("‚ùå No forms found on the page.")
        return

    for form in forms:
        action = form.attrs.get("action", "")  # Get form submission URL
        full_url = url + action  # Construct the full URL
        method = form.attrs.get("method", "get").lower()  # Get form method

        form_inputs = {input_tag.get("name"): xss_payloads[0] for input_tag in form.find_all("input") if input_tag.get("name")}

        print(f"üîç Testing form at {full_url}...")

        if method == "post":
            response = requests.post(full_url, data=form_inputs)
        else:
            response = requests.get(full_url, params=form_inputs)

        if xss_payloads[0] in response.text:
            print(f"‚ö†Ô∏è XSS vulnerability found in form at {full_url}")
            return True

    print("‚úÖ No XSS vulnerability found in forms.")
    return False


conn = sqlite3.connect('scanner.db')
cursor = conn.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS scan_results (id INTEGER PRIMARY KEY, url TEXT, vulnerability TEXT, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)")
conn.commit()

def store_xss_vulnerability(url, details):
    cursor.execute("INSERT INTO scan_results (url, vulnerability) VALUES (?, ?)", (url, details))
    conn.commit()
    print(f"‚úÖ Stored XSS vulnerability for {url}")


def generate_xss_report(url, vulnerabilities):
    c = canvas.Canvas(f"xss_report_{url.replace('https://', '').replace('/', '_')}.pdf")
    c.drawString(100, 800, f"XSS Report for {url}")

    y = 750
    for vuln in vulnerabilities:
        c.drawString(100, y, f"Vulnerability: {vuln}")
        y -= 30

    c.save()
    print("‚úÖ Report generated.")

