import requests
import sqlite3
from reportlab.pdfgen import canvas


SECURITY_HEADERS = [
    "Content-Security-Policy",
    "X-Frame-Options",
    "Strict-Transport-Security",
    "X-XSS-Protection",
    "X-Content-Type-Options",
    "Referrer-Policy",
    "Permissions-Policy"
]

def check_security_headers(url):
   
    try:
        response = requests.get(url, timeout=5)
        headers = response.headers

        print(f"üîç Checking security headers for {url}\n")

        missing_headers = []
        for header in SECURITY_HEADERS:
            if header not in headers:
                missing_headers.append(header)
                print(f"‚ö†Ô∏è MISSING: {header}")
            else:
                print(f"‚úÖ FOUND: {header} ‚ûù {headers[header]}")

        if not missing_headers:
            print("\n‚úÖ All recommended security headers are present!")
        else:
            print("\n‚ö†Ô∏è Security risk: Some important headers are missing.")

        return missing_headers

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error checking {url}: {e}")
        return []


conn = sqlite3.connect('scanner.db')
cursor = conn.cursor()
cursor.execute("""
    CREATE TABLE IF NOT EXISTS security_headers (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        url TEXT,
        missing_headers TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )
""")
conn.commit()


def store_security_header_results(url, missing_headers):
    if not missing_headers:
        return
    
    cursor.execute("INSERT INTO security_headers (url, missing_headers) VALUES (?, ?)", (url, ", ".join(missing_headers)))
    conn.commit()
    print(f"‚úÖ Stored security headers for {url}")


def check_security_headers(url):
  
    try:
        response = requests.get(url, timeout=5)
        headers = response.headers

        missing_headers = []
        for header in SECURITY_HEADERS:
            if header not in headers:
                missing_headers.append(header)

        if missing_headers:
            store_security_header_results(url, missing_headers)
        
        return missing_headers

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error checking {url}: {e}")
        return []


def generate_security_report(url, missing_headers):
   
    filename = f"security_report_{url.replace('https://', '').replace('/', '_')}.pdf"
    c = canvas.Canvas(filename)
    
    c.drawString(100, 800, f"Security Header Report for {url}")
    c.drawString(100, 780, f"Timestamp: CURRENT TIME")

    y = 750
    for header in missing_headers:
        c.drawString(100, y, f"‚ö†Ô∏è Missing: {header}")
        y -= 30

    c.save()
    print(f"‚úÖ Report saved as {filename}")


websites = [
    "https://example.com",
    "https://secure-site.com",
    "https://testsite.com"
]

for site in websites:
    missing = check_security_headers(site)
    if missing:
        generate_security_report(site, missing)